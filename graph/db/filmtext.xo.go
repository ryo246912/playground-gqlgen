package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"

	"github.com/uptrace/bun"
)

// FilmText represents a row from 'sakila.film_text'.
type FilmText struct {
	bun.BaseModel `bun:"table:film_text"`

	FilmID      uint16         `json:"film_id"`     // film_id
	Title       string         `json:"title"`       // title
	Description sql.NullString `json:"description"` // description
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [FilmText] exists in the database.
func (ft *FilmText) Exists() bool {
	return ft._exists
}

// Deleted returns true when the [FilmText] has been marked for deletion
// from the database.
func (ft *FilmText) Deleted() bool {
	return ft._deleted
}

// Insert inserts the [FilmText] to the database.
func (ft *FilmText) Insert(ctx context.Context, db DB) error {
	switch {
	case ft._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ft._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO sakila.film_text (` +
		`film_id, title, description` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`
	// run
	logf(sqlstr, ft.FilmID, ft.Title, ft.Description)
	if _, err := db.ExecContext(ctx, sqlstr, ft.FilmID, ft.Title, ft.Description); err != nil {
		return logerror(err)
	}
	// set exists
	ft._exists = true
	return nil
}

// Update updates a [FilmText] in the database.
func (ft *FilmText) Update(ctx context.Context, db DB) error {
	switch {
	case !ft._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ft._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE sakila.film_text SET ` +
		`title = ?, description = ? ` +
		`WHERE film_id = ?`
	// run
	logf(sqlstr, ft.Title, ft.Description, ft.FilmID)
	if _, err := db.ExecContext(ctx, sqlstr, ft.Title, ft.Description, ft.FilmID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [FilmText] to the database.
func (ft *FilmText) Save(ctx context.Context, db DB) error {
	if ft.Exists() {
		return ft.Update(ctx, db)
	}
	return ft.Insert(ctx, db)
}

// Upsert performs an upsert for [FilmText].
func (ft *FilmText) Upsert(ctx context.Context, db DB) error {
	switch {
	case ft._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO sakila.film_text (` +
		`film_id, title, description` +
		`) VALUES (` +
		`?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`film_id = VALUES(film_id), title = VALUES(title), description = VALUES(description)`
	// run
	logf(sqlstr, ft.FilmID, ft.Title, ft.Description)
	if _, err := db.ExecContext(ctx, sqlstr, ft.FilmID, ft.Title, ft.Description); err != nil {
		return logerror(err)
	}
	// set exists
	ft._exists = true
	return nil
}

// Delete deletes the [FilmText] from the database.
func (ft *FilmText) Delete(ctx context.Context, db DB) error {
	switch {
	case !ft._exists: // doesn't exist
		return nil
	case ft._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM sakila.film_text ` +
		`WHERE film_id = ?`
	// run
	logf(sqlstr, ft.FilmID)
	if _, err := db.ExecContext(ctx, sqlstr, ft.FilmID); err != nil {
		return logerror(err)
	}
	// set deleted
	ft._deleted = true
	return nil
}

// FilmTextByFilmID retrieves a row from 'sakila.film_text' as a [FilmText].
//
// Generated from index 'film_text_film_id_pkey'.
func FilmTextByFilmID(ctx context.Context, db DB, filmID uint16) (*FilmText, error) {
	// query
	const sqlstr = `SELECT ` +
		`film_id, title, description ` +
		`FROM sakila.film_text ` +
		`WHERE film_id = ?`
	// run
	logf(sqlstr, filmID)
	ft := FilmText{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, filmID).Scan(&ft.FilmID, &ft.Title, &ft.Description); err != nil {
		return nil, logerror(err)
	}
	return &ft, nil
}

// FilmTextByTitleDescription retrieves a row from 'sakila.film_text' as a [FilmText].
//
// Generated from index 'idx_title_description'.
func FilmTextByTitleDescription(ctx context.Context, db DB, title string, description sql.NullString) ([]*FilmText, error) {
	// query
	const sqlstr = `SELECT ` +
		`film_id, title, description ` +
		`FROM sakila.film_text ` +
		`WHERE title = ? AND description = ?`
	// run
	logf(sqlstr, title, description)
	rows, err := db.QueryContext(ctx, sqlstr, title, description)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*FilmText
	for rows.Next() {
		ft := FilmText{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ft.FilmID, &ft.Title, &ft.Description); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ft)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
