package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"

	"github.com/uptrace/bun"
)

// Customer represents a row from 'sakila.customer'.
type Customer struct {
	bun.BaseModel `bun:"table:customer"`

	CustomerID uint16         `json:"customer_id"` // customer_id
	StoreID    uint8          `json:"store_id"`    // store_id
	FirstName  string         `json:"first_name"`  // first_name
	LastName   string         `json:"last_name"`   // last_name
	Email      sql.NullString `json:"email"`       // email
	AddressID  uint16         `json:"address_id"`  // address_id
	Active     bool           `json:"active"`      // active
	CreateDate time.Time      `json:"create_date"` // create_date
	LastUpdate sql.NullTime   `json:"last_update"` // last_update
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Customer] exists in the database.
func (c *Customer) Exists() bool {
	return c._exists
}

// Deleted returns true when the [Customer] has been marked for deletion
// from the database.
func (c *Customer) Deleted() bool {
	return c._deleted
}

// Insert inserts the [Customer] to the database.
func (c *Customer) Insert(ctx context.Context, db DB) error {
	switch {
	case c._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case c._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO sakila.customer (` +
		`store_id, first_name, last_name, email, address_id, active, create_date, last_update` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, c.StoreID, c.FirstName, c.LastName, c.Email, c.AddressID, c.Active, c.CreateDate, c.LastUpdate)
	res, err := db.ExecContext(ctx, sqlstr, c.StoreID, c.FirstName, c.LastName, c.Email, c.AddressID, c.Active, c.CreateDate, c.LastUpdate)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	c.CustomerID = uint16(id)
	// set exists
	c._exists = true
	return nil
}

// Update updates a [Customer] in the database.
func (c *Customer) Update(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case c._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE sakila.customer SET ` +
		`store_id = ?, first_name = ?, last_name = ?, email = ?, address_id = ?, active = ?, create_date = ?, last_update = ? ` +
		`WHERE customer_id = ?`
	// run
	logf(sqlstr, c.StoreID, c.FirstName, c.LastName, c.Email, c.AddressID, c.Active, c.CreateDate, c.LastUpdate, c.CustomerID)
	if _, err := db.ExecContext(ctx, sqlstr, c.StoreID, c.FirstName, c.LastName, c.Email, c.AddressID, c.Active, c.CreateDate, c.LastUpdate, c.CustomerID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Customer] to the database.
func (c *Customer) Save(ctx context.Context, db DB) error {
	if c.Exists() {
		return c.Update(ctx, db)
	}
	return c.Insert(ctx, db)
}

// Upsert performs an upsert for [Customer].
func (c *Customer) Upsert(ctx context.Context, db DB) error {
	switch {
	case c._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO sakila.customer (` +
		`customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`store_id = VALUES(store_id), first_name = VALUES(first_name), last_name = VALUES(last_name), email = VALUES(email), address_id = VALUES(address_id), active = VALUES(active), create_date = VALUES(create_date), last_update = VALUES(last_update)`
	// run
	logf(sqlstr, c.CustomerID, c.StoreID, c.FirstName, c.LastName, c.Email, c.AddressID, c.Active, c.CreateDate, c.LastUpdate)
	if _, err := db.ExecContext(ctx, sqlstr, c.CustomerID, c.StoreID, c.FirstName, c.LastName, c.Email, c.AddressID, c.Active, c.CreateDate, c.LastUpdate); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// Delete deletes the [Customer] from the database.
func (c *Customer) Delete(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return nil
	case c._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM sakila.customer ` +
		`WHERE customer_id = ?`
	// run
	logf(sqlstr, c.CustomerID)
	if _, err := db.ExecContext(ctx, sqlstr, c.CustomerID); err != nil {
		return logerror(err)
	}
	// set deleted
	c._deleted = true
	return nil
}

// CustomerByCustomerID retrieves a row from 'sakila.customer' as a [Customer].
//
// Generated from index 'customer_customer_id_pkey'.
func CustomerByCustomerID(ctx context.Context, db DB, customerID uint16) (*Customer, error) {
	// query
	const sqlstr = `SELECT ` +
		`customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update ` +
		`FROM sakila.customer ` +
		`WHERE customer_id = ?`
	// run
	logf(sqlstr, customerID)
	c := Customer{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, customerID).Scan(&c.CustomerID, &c.StoreID, &c.FirstName, &c.LastName, &c.Email, &c.AddressID, &c.Active, &c.CreateDate, &c.LastUpdate); err != nil {
		return nil, logerror(err)
	}
	return &c, nil
}

// CustomerByAddressID retrieves a row from 'sakila.customer' as a [Customer].
//
// Generated from index 'idx_fk_address_id'.
func CustomerByAddressID(ctx context.Context, db DB, addressID uint16) ([]*Customer, error) {
	// query
	const sqlstr = `SELECT ` +
		`customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update ` +
		`FROM sakila.customer ` +
		`WHERE address_id = ?`
	// run
	logf(sqlstr, addressID)
	rows, err := db.QueryContext(ctx, sqlstr, addressID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Customer
	for rows.Next() {
		c := Customer{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&c.CustomerID, &c.StoreID, &c.FirstName, &c.LastName, &c.Email, &c.AddressID, &c.Active, &c.CreateDate, &c.LastUpdate); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &c)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// CustomerByStoreID retrieves a row from 'sakila.customer' as a [Customer].
//
// Generated from index 'idx_fk_store_id'.
func CustomerByStoreID(ctx context.Context, db DB, storeID uint8) ([]*Customer, error) {
	// query
	const sqlstr = `SELECT ` +
		`customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update ` +
		`FROM sakila.customer ` +
		`WHERE store_id = ?`
	// run
	logf(sqlstr, storeID)
	rows, err := db.QueryContext(ctx, sqlstr, storeID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Customer
	for rows.Next() {
		c := Customer{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&c.CustomerID, &c.StoreID, &c.FirstName, &c.LastName, &c.Email, &c.AddressID, &c.Active, &c.CreateDate, &c.LastUpdate); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &c)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// CustomerByLastName retrieves a row from 'sakila.customer' as a [Customer].
//
// Generated from index 'idx_last_name'.
func CustomerByLastName(ctx context.Context, db DB, lastName string) ([]*Customer, error) {
	// query
	const sqlstr = `SELECT ` +
		`customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update ` +
		`FROM sakila.customer ` +
		`WHERE last_name = ?`
	// run
	logf(sqlstr, lastName)
	rows, err := db.QueryContext(ctx, sqlstr, lastName)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Customer
	for rows.Next() {
		c := Customer{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&c.CustomerID, &c.StoreID, &c.FirstName, &c.LastName, &c.Email, &c.AddressID, &c.Active, &c.CreateDate, &c.LastUpdate); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &c)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Address returns the Address associated with the [Customer]'s (AddressID).
//
// Generated from foreign key 'fk_customer_address'.
func (c *Customer) Address(ctx context.Context, db DB) (*Address, error) {
	return AddressByAddressID(ctx, db, c.AddressID)
}

// Store returns the Store associated with the [Customer]'s (StoreID).
//
// Generated from foreign key 'fk_customer_store'.
func (c *Customer) Store(ctx context.Context, db DB) (*Store, error) {
	return StoreByStoreID(ctx, db, c.StoreID)
}
