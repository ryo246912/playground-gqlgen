package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"

	"github.com/uptrace/bun"
)

// FilmCategory represents a row from 'sakila.film_category'.
type FilmCategory struct {
	bun.BaseModel `bun:"table:film_category"`

	FilmID     uint16    `json:"film_id"`     // film_id
	CategoryID uint8     `json:"category_id"` // category_id
	LastUpdate time.Time `json:"last_update"` // last_update
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [FilmCategory] exists in the database.
func (fc *FilmCategory) Exists() bool {
	return fc._exists
}

// Deleted returns true when the [FilmCategory] has been marked for deletion
// from the database.
func (fc *FilmCategory) Deleted() bool {
	return fc._deleted
}

// Insert inserts the [FilmCategory] to the database.
func (fc *FilmCategory) Insert(ctx context.Context, db DB) error {
	switch {
	case fc._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case fc._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO sakila.film_category (` +
		`film_id, category_id, last_update` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`
	// run
	logf(sqlstr, fc.FilmID, fc.CategoryID, fc.LastUpdate)
	if _, err := db.ExecContext(ctx, sqlstr, fc.FilmID, fc.CategoryID, fc.LastUpdate); err != nil {
		return logerror(err)
	}
	// set exists
	fc._exists = true
	return nil
}

// Update updates a [FilmCategory] in the database.
func (fc *FilmCategory) Update(ctx context.Context, db DB) error {
	switch {
	case !fc._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case fc._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE sakila.film_category SET ` +
		`last_update = ? ` +
		`WHERE film_id = ? AND category_id = ?`
	// run
	logf(sqlstr, fc.LastUpdate, fc.FilmID, fc.CategoryID)
	if _, err := db.ExecContext(ctx, sqlstr, fc.LastUpdate, fc.FilmID, fc.CategoryID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [FilmCategory] to the database.
func (fc *FilmCategory) Save(ctx context.Context, db DB) error {
	if fc.Exists() {
		return fc.Update(ctx, db)
	}
	return fc.Insert(ctx, db)
}

// Upsert performs an upsert for [FilmCategory].
func (fc *FilmCategory) Upsert(ctx context.Context, db DB) error {
	switch {
	case fc._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO sakila.film_category (` +
		`film_id, category_id, last_update` +
		`) VALUES (` +
		`?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`film_id = VALUES(film_id), category_id = VALUES(category_id), last_update = VALUES(last_update)`
	// run
	logf(sqlstr, fc.FilmID, fc.CategoryID, fc.LastUpdate)
	if _, err := db.ExecContext(ctx, sqlstr, fc.FilmID, fc.CategoryID, fc.LastUpdate); err != nil {
		return logerror(err)
	}
	// set exists
	fc._exists = true
	return nil
}

// Delete deletes the [FilmCategory] from the database.
func (fc *FilmCategory) Delete(ctx context.Context, db DB) error {
	switch {
	case !fc._exists: // doesn't exist
		return nil
	case fc._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM sakila.film_category ` +
		`WHERE film_id = ? AND category_id = ?`
	// run
	logf(sqlstr, fc.FilmID, fc.CategoryID)
	if _, err := db.ExecContext(ctx, sqlstr, fc.FilmID, fc.CategoryID); err != nil {
		return logerror(err)
	}
	// set deleted
	fc._deleted = true
	return nil
}

// FilmCategoryByFilmIDCategoryID retrieves a row from 'sakila.film_category' as a [FilmCategory].
//
// Generated from index 'film_category_film_id_category_id_pkey'.
func FilmCategoryByFilmIDCategoryID(ctx context.Context, db DB, filmID uint16, categoryID uint8) (*FilmCategory, error) {
	// query
	const sqlstr = `SELECT ` +
		`film_id, category_id, last_update ` +
		`FROM sakila.film_category ` +
		`WHERE film_id = ? AND category_id = ?`
	// run
	logf(sqlstr, filmID, categoryID)
	fc := FilmCategory{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, filmID, categoryID).Scan(&fc.FilmID, &fc.CategoryID, &fc.LastUpdate); err != nil {
		return nil, logerror(err)
	}
	return &fc, nil
}

// FilmCategoryByCategoryID retrieves a row from 'sakila.film_category' as a [FilmCategory].
//
// Generated from index 'fk_film_category_category'.
func FilmCategoryByCategoryID(ctx context.Context, db DB, categoryID uint8) ([]*FilmCategory, error) {
	// query
	const sqlstr = `SELECT ` +
		`film_id, category_id, last_update ` +
		`FROM sakila.film_category ` +
		`WHERE category_id = ?`
	// run
	logf(sqlstr, categoryID)
	rows, err := db.QueryContext(ctx, sqlstr, categoryID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*FilmCategory
	for rows.Next() {
		fc := FilmCategory{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&fc.FilmID, &fc.CategoryID, &fc.LastUpdate); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &fc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Category returns the Category associated with the [FilmCategory]'s (CategoryID).
//
// Generated from foreign key 'fk_film_category_category'.
func (fc *FilmCategory) Category(ctx context.Context, db DB) (*Category, error) {
	return CategoryByCategoryID(ctx, db, fc.CategoryID)
}

// Film returns the Film associated with the [FilmCategory]'s (FilmID).
//
// Generated from foreign key 'fk_film_category_film'.
func (fc *FilmCategory) Film(ctx context.Context, db DB) (*Film, error) {
	return FilmByFilmID(ctx, db, fc.FilmID)
}
