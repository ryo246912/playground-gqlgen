package db

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// Rating is the 'rating' enum type from schema 'sakila'.
type Rating uint16

// Rating values.
const (
	// RatingG is the 'G' rating.
	RatingG Rating = 1
	// RatingPg is the 'PG' rating.
	RatingPg Rating = 2
	// RatingPg13 is the 'PG-13' rating.
	RatingPg13 Rating = 3
	// RatingR is the 'R' rating.
	RatingR Rating = 4
	// RatingNc17 is the 'NC-17' rating.
	RatingNc17 Rating = 5
)

// String satisfies the [fmt.Stringer] interface.
func (r Rating) String() string {
	switch r {
	case RatingG:
		return "G"
	case RatingPg:
		return "PG"
	case RatingPg13:
		return "PG-13"
	case RatingR:
		return "R"
	case RatingNc17:
		return "NC-17"
	}
	return fmt.Sprintf("Rating(%d)", r)
}

// MarshalText marshals [Rating] into text.
func (r Rating) MarshalText() ([]byte, error) {
	return []byte(r.String()), nil
}

// UnmarshalText unmarshals [Rating] from text.
func (r *Rating) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "G":
		*r = RatingG
	case "PG":
		*r = RatingPg
	case "PG-13":
		*r = RatingPg13
	case "R":
		*r = RatingR
	case "NC-17":
		*r = RatingNc17
	default:
		return ErrInvalidRating(str)
	}
	return nil
}

// Value satisfies the [driver.Valuer] interface.
func (r Rating) Value() (driver.Value, error) {
	return r.String(), nil
}

// Scan satisfies the [sql.Scanner] interface.
func (r *Rating) Scan(v interface{}) error {
	switch x := v.(type) {
	case []byte:
		return r.UnmarshalText(x)
	case string:
		return r.UnmarshalText([]byte(x))
	}
	return ErrInvalidRating(fmt.Sprintf("%T", v))
}

// NullRating represents a null 'rating' enum for schema 'sakila'.
type NullRating struct {
	Rating Rating
	// Valid is true if [Rating] is not null.
	Valid bool
}

// Value satisfies the [driver.Valuer] interface.
func (nr NullRating) Value() (driver.Value, error) {
	if !nr.Valid {
		return nil, nil
	}
	return nr.Rating.Value()
}

// Scan satisfies the [sql.Scanner] interface.
func (nr *NullRating) Scan(v interface{}) error {
	if v == nil {
		nr.Rating, nr.Valid = 0, false
		return nil
	}
	err := nr.Rating.Scan(v)
	nr.Valid = err == nil
	return err
}

// ErrInvalidRating is the invalid [Rating] error.
type ErrInvalidRating string

// Error satisfies the error interface.
func (err ErrInvalidRating) Error() string {
	return fmt.Sprintf("invalid Rating(%s)", string(err))
}
