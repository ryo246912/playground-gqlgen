package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"

	"github.com/uptrace/bun"
)

// Category represents a row from 'sakila.category'.
type Category struct {
	bun.BaseModel `bun:"table:category"`

	CategoryID uint8     `json:"category_id"` // category_id
	Name       string    `json:"name"`        // name
	LastUpdate time.Time `json:"last_update"` // last_update
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Category] exists in the database.
func (c *Category) Exists() bool {
	return c._exists
}

// Deleted returns true when the [Category] has been marked for deletion
// from the database.
func (c *Category) Deleted() bool {
	return c._deleted
}

// Insert inserts the [Category] to the database.
func (c *Category) Insert(ctx context.Context, db DB) error {
	switch {
	case c._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case c._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO sakila.category (` +
		`name, last_update` +
		`) VALUES (` +
		`?, ?` +
		`)`
	// run
	logf(sqlstr, c.Name, c.LastUpdate)
	res, err := db.ExecContext(ctx, sqlstr, c.Name, c.LastUpdate)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	c.CategoryID = uint8(id)
	// set exists
	c._exists = true
	return nil
}

// Update updates a [Category] in the database.
func (c *Category) Update(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case c._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE sakila.category SET ` +
		`name = ?, last_update = ? ` +
		`WHERE category_id = ?`
	// run
	logf(sqlstr, c.Name, c.LastUpdate, c.CategoryID)
	if _, err := db.ExecContext(ctx, sqlstr, c.Name, c.LastUpdate, c.CategoryID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Category] to the database.
func (c *Category) Save(ctx context.Context, db DB) error {
	if c.Exists() {
		return c.Update(ctx, db)
	}
	return c.Insert(ctx, db)
}

// Upsert performs an upsert for [Category].
func (c *Category) Upsert(ctx context.Context, db DB) error {
	switch {
	case c._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO sakila.category (` +
		`category_id, name, last_update` +
		`) VALUES (` +
		`?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`name = VALUES(name), last_update = VALUES(last_update)`
	// run
	logf(sqlstr, c.CategoryID, c.Name, c.LastUpdate)
	if _, err := db.ExecContext(ctx, sqlstr, c.CategoryID, c.Name, c.LastUpdate); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// Delete deletes the [Category] from the database.
func (c *Category) Delete(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return nil
	case c._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM sakila.category ` +
		`WHERE category_id = ?`
	// run
	logf(sqlstr, c.CategoryID)
	if _, err := db.ExecContext(ctx, sqlstr, c.CategoryID); err != nil {
		return logerror(err)
	}
	// set deleted
	c._deleted = true
	return nil
}

// CategoryByCategoryID retrieves a row from 'sakila.category' as a [Category].
//
// Generated from index 'category_category_id_pkey'.
func CategoryByCategoryID(ctx context.Context, db DB, categoryID uint8) (*Category, error) {
	// query
	const sqlstr = `SELECT ` +
		`category_id, name, last_update ` +
		`FROM sakila.category ` +
		`WHERE category_id = ?`
	// run
	logf(sqlstr, categoryID)
	c := Category{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, categoryID).Scan(&c.CategoryID, &c.Name, &c.LastUpdate); err != nil {
		return nil, logerror(err)
	}
	return &c, nil
}
