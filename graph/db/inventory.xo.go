package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"

	"github.com/uptrace/bun"
)

// Inventory represents a row from 'sakila.inventory'.
type Inventory struct {
	bun.BaseModel `bun:"table:inventory"`

	InventoryID uint      `json:"inventory_id"` // inventory_id
	FilmID      uint16    `json:"film_id"`      // film_id
	StoreID     uint8     `json:"store_id"`     // store_id
	LastUpdate  time.Time `json:"last_update"`  // last_update
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Inventory] exists in the database.
func (i *Inventory) Exists() bool {
	return i._exists
}

// Deleted returns true when the [Inventory] has been marked for deletion
// from the database.
func (i *Inventory) Deleted() bool {
	return i._deleted
}

// Insert inserts the [Inventory] to the database.
func (i *Inventory) Insert(ctx context.Context, db DB) error {
	switch {
	case i._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case i._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO sakila.inventory (` +
		`film_id, store_id, last_update` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`
	// run
	logf(sqlstr, i.FilmID, i.StoreID, i.LastUpdate)
	res, err := db.ExecContext(ctx, sqlstr, i.FilmID, i.StoreID, i.LastUpdate)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	i.InventoryID = uint(id)
	// set exists
	i._exists = true
	return nil
}

// Update updates a [Inventory] in the database.
func (i *Inventory) Update(ctx context.Context, db DB) error {
	switch {
	case !i._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case i._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE sakila.inventory SET ` +
		`film_id = ?, store_id = ?, last_update = ? ` +
		`WHERE inventory_id = ?`
	// run
	logf(sqlstr, i.FilmID, i.StoreID, i.LastUpdate, i.InventoryID)
	if _, err := db.ExecContext(ctx, sqlstr, i.FilmID, i.StoreID, i.LastUpdate, i.InventoryID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Inventory] to the database.
func (i *Inventory) Save(ctx context.Context, db DB) error {
	if i.Exists() {
		return i.Update(ctx, db)
	}
	return i.Insert(ctx, db)
}

// Upsert performs an upsert for [Inventory].
func (i *Inventory) Upsert(ctx context.Context, db DB) error {
	switch {
	case i._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO sakila.inventory (` +
		`inventory_id, film_id, store_id, last_update` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`film_id = VALUES(film_id), store_id = VALUES(store_id), last_update = VALUES(last_update)`
	// run
	logf(sqlstr, i.InventoryID, i.FilmID, i.StoreID, i.LastUpdate)
	if _, err := db.ExecContext(ctx, sqlstr, i.InventoryID, i.FilmID, i.StoreID, i.LastUpdate); err != nil {
		return logerror(err)
	}
	// set exists
	i._exists = true
	return nil
}

// Delete deletes the [Inventory] from the database.
func (i *Inventory) Delete(ctx context.Context, db DB) error {
	switch {
	case !i._exists: // doesn't exist
		return nil
	case i._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM sakila.inventory ` +
		`WHERE inventory_id = ?`
	// run
	logf(sqlstr, i.InventoryID)
	if _, err := db.ExecContext(ctx, sqlstr, i.InventoryID); err != nil {
		return logerror(err)
	}
	// set deleted
	i._deleted = true
	return nil
}

// InventoryByFilmID retrieves a row from 'sakila.inventory' as a [Inventory].
//
// Generated from index 'idx_fk_film_id'.
func InventoryByFilmID(ctx context.Context, db DB, filmID uint16) ([]*Inventory, error) {
	// query
	const sqlstr = `SELECT ` +
		`inventory_id, film_id, store_id, last_update ` +
		`FROM sakila.inventory ` +
		`WHERE film_id = ?`
	// run
	logf(sqlstr, filmID)
	rows, err := db.QueryContext(ctx, sqlstr, filmID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Inventory
	for rows.Next() {
		i := Inventory{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&i.InventoryID, &i.FilmID, &i.StoreID, &i.LastUpdate); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// InventoryByStoreIDFilmID retrieves a row from 'sakila.inventory' as a [Inventory].
//
// Generated from index 'idx_store_id_film_id'.
func InventoryByStoreIDFilmID(ctx context.Context, db DB, storeID uint8, filmID uint16) ([]*Inventory, error) {
	// query
	const sqlstr = `SELECT ` +
		`inventory_id, film_id, store_id, last_update ` +
		`FROM sakila.inventory ` +
		`WHERE store_id = ? AND film_id = ?`
	// run
	logf(sqlstr, storeID, filmID)
	rows, err := db.QueryContext(ctx, sqlstr, storeID, filmID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Inventory
	for rows.Next() {
		i := Inventory{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&i.InventoryID, &i.FilmID, &i.StoreID, &i.LastUpdate); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// InventoryByInventoryID retrieves a row from 'sakila.inventory' as a [Inventory].
//
// Generated from index 'inventory_inventory_id_pkey'.
func InventoryByInventoryID(ctx context.Context, db DB, inventoryID uint) (*Inventory, error) {
	// query
	const sqlstr = `SELECT ` +
		`inventory_id, film_id, store_id, last_update ` +
		`FROM sakila.inventory ` +
		`WHERE inventory_id = ?`
	// run
	logf(sqlstr, inventoryID)
	i := Inventory{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, inventoryID).Scan(&i.InventoryID, &i.FilmID, &i.StoreID, &i.LastUpdate); err != nil {
		return nil, logerror(err)
	}
	return &i, nil
}

// Film returns the Film associated with the [Inventory]'s (FilmID).
//
// Generated from foreign key 'fk_inventory_film'.
func (i *Inventory) Film(ctx context.Context, db DB) (*Film, error) {
	return FilmByFilmID(ctx, db, i.FilmID)
}

// Store returns the Store associated with the [Inventory]'s (StoreID).
//
// Generated from foreign key 'fk_inventory_store'.
func (i *Inventory) Store(ctx context.Context, db DB) (*Store, error) {
	return StoreByStoreID(ctx, db, i.StoreID)
}
