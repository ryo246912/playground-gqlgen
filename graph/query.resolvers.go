package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"
	"log"

	"github.com/ryo246912/playground-gqlgen/graph/db"
	"github.com/ryo246912/playground-gqlgen/graph/model"
	"github.com/ryo246912/playground-gqlgen/internal"
)

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return r.todos, nil
}

// Customers is the resolver for the customers field.
func (r *queryResolver) Customers(ctx context.Context, limit *int32) ([]*model.Customer, error) {
	var customers []db.Customer

	if limit == nil {
		defaultLimit := int32(10)
		limit = &defaultLimit
	}

	err := r.DB.NewSelect().Model(&customers).OrderExpr("customer_id ASC").Limit(int(*limit)).Scan(ctx)
	if err != nil {
		log.Println("error!!", err)
		return nil, err
	}

	res := make([]*model.Customer, len(customers))
	for i, c := range customers {
		res[i] = &model.Customer{
			ID:         fmt.Sprint(c.CustomerID),
			FirstName:  c.FirstName,
			LastName:   c.LastName,
			Email:      *nullStringToPtr(c.Email),
			Active:     c.Active,
			CreateDate: c.CreateDate,
			LastUpdate: nullTimeToPtr(c.LastUpdate),
			StoreID:    fmt.Sprint(c.StoreID),
			AddressID:  fmt.Sprint(c.AddressID),
		}
	}

	return res, nil
}

// Query returns internal.QueryResolver implementation.
func (r *Resolver) Query() internal.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
