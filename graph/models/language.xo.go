package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"

	"github.com/uptrace/bun"
)

// Language represents a row from 'sakila.language'.
type Language struct {
	bun.BaseModel `bun:"table:language"`

	LanguageID uint8     `json:"language_id"` // language_id
	Name       string    `json:"name"`        // name
	LastUpdate time.Time `json:"last_update"` // last_update
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Language] exists in the database.
func (l *Language) Exists() bool {
	return l._exists
}

// Deleted returns true when the [Language] has been marked for deletion
// from the database.
func (l *Language) Deleted() bool {
	return l._deleted
}

// Insert inserts the [Language] to the database.
func (l *Language) Insert(ctx context.Context, db DB) error {
	switch {
	case l._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case l._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO sakila.language (` +
		`name, last_update` +
		`) VALUES (` +
		`?, ?` +
		`)`
	// run
	logf(sqlstr, l.Name, l.LastUpdate)
	res, err := db.ExecContext(ctx, sqlstr, l.Name, l.LastUpdate)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	l.LanguageID = uint8(id)
	// set exists
	l._exists = true
	return nil
}

// Update updates a [Language] in the database.
func (l *Language) Update(ctx context.Context, db DB) error {
	switch {
	case !l._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case l._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE sakila.language SET ` +
		`name = ?, last_update = ? ` +
		`WHERE language_id = ?`
	// run
	logf(sqlstr, l.Name, l.LastUpdate, l.LanguageID)
	if _, err := db.ExecContext(ctx, sqlstr, l.Name, l.LastUpdate, l.LanguageID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Language] to the database.
func (l *Language) Save(ctx context.Context, db DB) error {
	if l.Exists() {
		return l.Update(ctx, db)
	}
	return l.Insert(ctx, db)
}

// Upsert performs an upsert for [Language].
func (l *Language) Upsert(ctx context.Context, db DB) error {
	switch {
	case l._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO sakila.language (` +
		`language_id, name, last_update` +
		`) VALUES (` +
		`?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`name = VALUES(name), last_update = VALUES(last_update)`
	// run
	logf(sqlstr, l.LanguageID, l.Name, l.LastUpdate)
	if _, err := db.ExecContext(ctx, sqlstr, l.LanguageID, l.Name, l.LastUpdate); err != nil {
		return logerror(err)
	}
	// set exists
	l._exists = true
	return nil
}

// Delete deletes the [Language] from the database.
func (l *Language) Delete(ctx context.Context, db DB) error {
	switch {
	case !l._exists: // doesn't exist
		return nil
	case l._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM sakila.language ` +
		`WHERE language_id = ?`
	// run
	logf(sqlstr, l.LanguageID)
	if _, err := db.ExecContext(ctx, sqlstr, l.LanguageID); err != nil {
		return logerror(err)
	}
	// set deleted
	l._deleted = true
	return nil
}

// LanguageByLanguageID retrieves a row from 'sakila.language' as a [Language].
//
// Generated from index 'language_language_id_pkey'.
func LanguageByLanguageID(ctx context.Context, db DB, languageID uint8) (*Language, error) {
	// query
	const sqlstr = `SELECT ` +
		`language_id, name, last_update ` +
		`FROM sakila.language ` +
		`WHERE language_id = ?`
	// run
	logf(sqlstr, languageID)
	l := Language{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, languageID).Scan(&l.LanguageID, &l.Name, &l.LastUpdate); err != nil {
		return nil, logerror(err)
	}
	return &l, nil
}
